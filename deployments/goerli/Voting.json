{
  "address": "0x3eE0F6b893fcEF3092D136FD985347C7A89e9Bae",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        }
      ],
      "name": "VoterRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum Voting.WorkflowStatus",
          "name": "previousStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum Voting.WorkflowStatus",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "WorkflowStatusChange",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_desc",
          "type": "string"
        }
      ],
      "name": "addProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "addVoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endProposalsRegistering",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endVotingSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getOneProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "voteCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Proposal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "voteCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Proposal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getVoter",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isRegistered",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasVoted",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "votedProposalId",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Voter",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "setVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startProposalsRegistering",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startVotersRegistering",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startVotingSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tallyVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningProposalID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "workflowStatus",
      "outputs": [
        {
          "internalType": "enum Voting.WorkflowStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4212731be0a28d04633b89b669961ef8797fe36053d4e4d7ac90ce529970493a",
  "receipt": {
    "to": null,
    "from": "0xD69A0E1306A67Ef1045953e39e68d5CA9d6C8448",
    "contractAddress": "0x3eE0F6b893fcEF3092D136FD985347C7A89e9Bae",
    "transactionIndex": 60,
    "gasUsed": "2232171",
    "logsBloom": "0x
    "blockHash": "0x1b59399b4579f95ea8e1d0ae6b24288b019788a935a7809cff32e2cf63419e19",
    "transactionHash": "0x4212731be0a28d04633b89b669961ef8797fe36053d4e4d7ac90ce529970493a",
    "logs": [
      {
        "transactionIndex": 60,
        "blockNumber": 9394515,
        "transactionHash": "0x4212731be0a28d04633b89b669961ef8797fe36053d4e4d7ac90ce529970493a",
        "address": "0x3eE0F6b893fcEF3092D136FD985347C7A89e9Bae",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d69a0e1306a67ef1045953e39e68d5ca9d6c8448"
        ],
        "data": "0x",
        "logIndex": 207,
        "blockHash": "0x1b59399b4579f95ea8e1d0ae6b24288b019788a935a7809cff32e2cf63419e19"
      }
    ],
    "blockNumber": 9394515,
    "cumulativeGasUsed": "19367733",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "6c031b79bcb6e013893498eb0f4e6ecd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"VoterRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Voting.WorkflowStatus\",\"name\":\"previousStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum Voting.WorkflowStatus\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"WorkflowStatusChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_desc\",\"type\":\"string\"}],\"name\":\"addProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endProposalsRegistering\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endVotingSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOneProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"internalType\":\"struct Voting.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"internalType\":\"struct Voting.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getVoter\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votedProposalId\",\"type\":\"uint256\"}],\"internalType\":\"struct Voting.Voter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startProposalsRegistering\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVotersRegistering\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVotingSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tallyVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningProposalID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workflowStatus\",\"outputs\":[{\"internalType\":\"enum Voting.WorkflowStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Voting.sol\":\"Voting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Voting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Voting is Ownable {\\n\\n    uint public winningProposalID;\\n    \\n    struct Voter {\\n        bool isRegistered;\\n        bool hasVoted;\\n        uint votedProposalId;\\n    }\\n\\n    struct Proposal {\\n        string description;\\n        uint voteCount;\\n    }\\n\\n    enum  WorkflowStatus {\\n        RegisteringVoters,\\n        ProposalsRegistrationStarted,\\n        ProposalsRegistrationEnded,\\n        VotingSessionStarted,\\n        VotingSessionEnded,\\n        VotesTallied\\n    }\\n\\n    WorkflowStatus public workflowStatus;\\n    Proposal[] proposalsArray;\\n    mapping (address => Voter) voters;\\n\\n    event VoterRegistered(address voterAddress); \\n    event WorkflowStatusChange(WorkflowStatus previousStatus, WorkflowStatus newStatus);\\n    event ProposalRegistered(uint proposalId);\\n    event Voted (address voter, uint proposalId);\\n    \\n    modifier onlyVoters() {\\n        require(voters[msg.sender].isRegistered, \\\"You're not a voter\\\");\\n        _;\\n    }\\n    \\n    // on peut faire un modifier pour les \\u00e9tats\\n\\n    // ::::::::::::: GETTERS ::::::::::::: //\\n\\n    function getVoter(address _addr) external onlyVoters view returns (Voter memory) {\\n        return voters[_addr];\\n    }\\n    \\n    \\n    function getOneProposal(uint _id) external onlyVoters view returns (Proposal memory) {\\n        return proposalsArray[_id];\\n    }\\n\\n    function getProposal(uint _id) external onlyVoters view returns (Proposal memory) {\\n        return proposalsArray[_id];\\n    }\\n\\n \\n    // ::::::::::::: REGISTRATION ::::::::::::: // \\n\\n    function addVoter(address _addr) external onlyOwner {\\n        require(workflowStatus == WorkflowStatus.RegisteringVoters, 'Voters registration is not open yet');\\n        require(voters[_addr].isRegistered != true, 'Already registered');\\n    \\n        voters[_addr].isRegistered = true;\\n        emit VoterRegistered(_addr);\\n    }\\n \\n\\n    // ::::::::::::: PROPOSAL ::::::::::::: // \\n\\n    function addProposal(string calldata _desc) external onlyVoters {\\n        require(workflowStatus == WorkflowStatus.ProposalsRegistrationStarted, 'Proposals are not allowed yet');\\n        require(keccak256(abi.encode(_desc)) != keccak256(abi.encode(\\\"\\\")), 'Vous ne pouvez pas ne rien proposer'); // facultatif\\n        // voir que desc est different des autres\\n\\n        Proposal memory proposal;\\n        proposal.description = _desc;\\n        proposalsArray.push(proposal);\\n        emit ProposalRegistered(proposalsArray.length-1);\\n    }\\n\\n    // ::::::::::::: VOTE ::::::::::::: //\\n\\n    function setVote(uint _id) external onlyVoters {\\n        require(workflowStatus == WorkflowStatus.VotingSessionStarted, 'Voting session havent started yet');\\n        require(voters[msg.sender].hasVoted != true, 'You have already voted');\\n        require(_id < proposalsArray.length, 'Proposal not found'); // pas oblig\\u00e9, et pas besoin du >0 car uint\\n\\n        voters[msg.sender].votedProposalId = _id;\\n        voters[msg.sender].hasVoted = true;\\n        proposalsArray[_id].voteCount++;\\n\\n        emit Voted(msg.sender, _id);\\n    }\\n\\n    // ::::::::::::: STATE ::::::::::::: //\\n\\n    function startVotersRegistering() external onlyOwner {\\n        require(workflowStatus == WorkflowStatus.VotesTallied, \\\"Voting are not finished\\\");\\n        workflowStatus = WorkflowStatus.RegisteringVoters;\\n    }\\n\\n    function startProposalsRegistering() external onlyOwner {\\n        require(workflowStatus == WorkflowStatus.RegisteringVoters, 'Registering proposals cant be started now');\\n        workflowStatus = WorkflowStatus.ProposalsRegistrationStarted;\\n        \\n        Proposal memory proposal;\\n        proposal.description = \\\"GENESIS\\\";\\n        proposalsArray.push(proposal);\\n        \\n        emit WorkflowStatusChange(WorkflowStatus.RegisteringVoters, WorkflowStatus.ProposalsRegistrationStarted);\\n    }\\n\\n    function endProposalsRegistering() external onlyOwner {\\n        require(workflowStatus == WorkflowStatus.ProposalsRegistrationStarted, 'Registering proposals havent started yet');\\n        workflowStatus = WorkflowStatus.ProposalsRegistrationEnded;\\n        emit WorkflowStatusChange(WorkflowStatus.ProposalsRegistrationStarted, WorkflowStatus.ProposalsRegistrationEnded);\\n    }\\n\\n    function startVotingSession() external onlyOwner {\\n        require(workflowStatus == WorkflowStatus.ProposalsRegistrationEnded, 'Registering proposals phase is not finished');\\n        workflowStatus = WorkflowStatus.VotingSessionStarted;\\n        emit WorkflowStatusChange(WorkflowStatus.ProposalsRegistrationEnded, WorkflowStatus.VotingSessionStarted);\\n    }\\n\\n    function endVotingSession() external onlyOwner {\\n        require(workflowStatus == WorkflowStatus.VotingSessionStarted, 'Voting session havent started yet');\\n        workflowStatus = WorkflowStatus.VotingSessionEnded;\\n        emit WorkflowStatusChange(WorkflowStatus.VotingSessionStarted, WorkflowStatus.VotingSessionEnded);\\n    }\\n\\n\\n   function tallyVotes() external onlyOwner {\\n       require(workflowStatus == WorkflowStatus.VotingSessionEnded, \\\"Current status is not voting session ended\\\");\\n       uint _winningProposalId;\\n      for (uint256 p = 0; p < proposalsArray.length; p++) {\\n           if (proposalsArray[p].voteCount > proposalsArray[_winningProposalId].voteCount) {\\n               _winningProposalId = p;\\n          }\\n       }\\n       winningProposalID = _winningProposalId;\\n       \\n       workflowStatus = WorkflowStatus.VotesTallied;\\n       emit WorkflowStatusChange(WorkflowStatus.VotingSessionEnded, WorkflowStatus.VotesTallied);\\n    }\\n}\",\"keccak256\":\"0xc16935fab3ded8d03cf82da34dd30fd8a61456fd33fbada001a6f00cd893120a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5062000032620000266200003860201b60201c565b6200004060201b60201c565b62000104565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61272280620001146000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063a7bfab16116100a2578063c88af42f11610071578063c88af42f14610234578063d4f50f981461023e578063ee74c6781461026e578063f2fde38b14610278578063f4ab9adf146102945761010b565b8063a7bfab16146101d2578063bdc01431146101dc578063c7038a4e146101fa578063c7f758a8146102045761010b565b8063715018a6116100de578063715018a61461015c5780638da5cb5b14610166578063a1edffa214610184578063a2788cce146101a25761010b565b80631964b44514610110578063230796ae1461011a5780632fdae3c514610136578063378a217814610152575b600080fd5b6101186102b0565b005b610134600480360381019061012f91906116b2565b61035a565b005b610150600480360381019061014b9190611744565b610655565b005b61015a6108d8565b005b610164610a45565b005b61016e610a59565b60405161017b91906117d2565b60405180910390f35b61018c610a82565b6040516101999190611864565b60405180910390f35b6101bc60048036038101906101b791906116b2565b610a95565b6040516101c9919061195b565b60405180910390f35b6101da610bfc565b005b6101e4610ce2565b6040516101f1919061198c565b60405180910390f35b610202610ce8565b005b61021e600480360381019061021991906116b2565b610e63565b60405161022b919061195b565b60405180910390f35b61023c610fca565b005b610258600480360381019061025391906119d3565b6110af565b6040516102659190611a5d565b60405180910390f35b6102766111d7565b005b610292600480360381019061028d91906119d3565b6112bd565b005b6102ae60048036038101906102a991906119d3565b611340565b005b6102b86114e9565b6005808111156102cb576102ca6117ed565b5b600260009054906101000a900460ff1660058111156102ed576102ec6117ed565b5b1461032d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032490611ad5565b60405180910390fd5b6000600260006101000a81548160ff02191690836005811115610353576103526117ed565b5b0217905550565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166103e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e090611b41565b60405180910390fd5b600360058111156103fd576103fc6117ed565b5b600260009054906101000a900460ff16600581111561041f5761041e6117ed565b5b1461045f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045690611bd3565b60405180910390fd5b60011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff161515036104f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ec90611c3f565b60405180910390fd5b600380549050811061053c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053390611cab565b60405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff021916908315150217905550600381815481106105f2576105f1611ccb565b5b9060005260206000209060020201600101600081548092919061061490611d29565b91905055507f4d99b957a2bc29a30ebd96a7be8e68fe50a3c701db28a91436490b7d53870ca4338260405161064a929190611d71565b60405180910390a150565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166106e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106db90611b41565b60405180910390fd5b600160058111156106f8576106f76117ed565b5b600260009054906101000a900460ff16600581111561071a576107196117ed565b5b1461075a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075190611de6565b60405180910390fd5b60405160200161076990611e2c565b604051602081830303815290604052805190602001208282604051602001610792929190611e88565b60405160208183030381529060405280519060200120036107e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107df90611f1e565b60405180910390fd5b6107f0611633565b82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081600001819052506003819080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001908161087e9190612179565b506020820151816001015550507f92e393e9b54e2f801d3ea4beb0c5e71a21cc34a5d34b77d0fb8a3aa1650dc18f60016003805490506108be919061224b565b6040516108cb919061198c565b60405180910390a1505050565b6108e06114e9565b600460058111156108f4576108f36117ed565b5b600260009054906101000a900460ff166005811115610916576109156117ed565b5b14610956576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094d906122f1565b60405180910390fd5b600080600090505b6003805490508110156109d4576003828154811061097f5761097e611ccb565b5b906000526020600020906002020160010154600382815481106109a5576109a4611ccb565b5b90600052602060002090600202016001015411156109c1578091505b80806109cc90611d29565b91505061095e565b50806001819055506005600260006101000a81548160ff02191690836005811115610a0257610a016117ed565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f60046005604051610a3a929190612311565b60405180910390a150565b610a4d6114e9565b610a576000611567565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900460ff1681565b610a9d611633565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610b2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2390611b41565b60405180910390fd5b60038281548110610b4057610b3f611ccb565b5b9060005260206000209060020201604051806040016040529081600082018054610b6990611f9c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9590611f9c565b8015610be25780601f10610bb757610100808354040283529160200191610be2565b820191906000526020600020905b815481529060010190602001808311610bc557829003601f168201915b505050505081526020016001820154815250509050919050565b610c046114e9565b60036005811115610c1857610c176117ed565b5b600260009054906101000a900460ff166005811115610c3a57610c396117ed565b5b14610c7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7190611bd3565b60405180910390fd5b6004600260006101000a81548160ff02191690836005811115610ca057610c9f6117ed565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f60036004604051610cd8929190612311565b60405180910390a1565b60015481565b610cf06114e9565b60006005811115610d0457610d036117ed565b5b600260009054906101000a900460ff166005811115610d2657610d256117ed565b5b14610d66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5d906123ac565b60405180910390fd5b6001600260006101000a81548160ff02191690836005811115610d8c57610d8b6117ed565b5b0217905550610d99611633565b6040518060400160405280600781526020017f47454e4553495300000000000000000000000000000000000000000000000000815250816000018190525060038190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000019081610e189190612179565b506020820151816001015550507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f60006001604051610e58929190612311565b60405180910390a150565b610e6b611633565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610efa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef190611b41565b60405180910390fd5b60038281548110610f0e57610f0d611ccb565b5b9060005260206000209060020201604051806040016040529081600082018054610f3790611f9c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6390611f9c565b8015610fb05780601f10610f8557610100808354040283529160200191610fb0565b820191906000526020600020905b815481529060010190602001808311610f9357829003601f168201915b505050505081526020016001820154815250509050919050565b610fd26114e9565b60016005811115610fe657610fe56117ed565b5b600260009054906101000a900460ff166005811115611008576110076117ed565b5b14611048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103f9061243e565b60405180910390fd5b60028060006101000a81548160ff0219169083600581111561106d5761106c6117ed565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f600160026040516110a5929190612311565b60405180910390a1565b6110b761164d565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16611146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113d90611b41565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016001820154815250509050919050565b6111df6114e9565b600260058111156111f3576111f26117ed565b5b600260009054906101000a900460ff166005811115611215576112146117ed565b5b14611255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124c906124d0565b60405180910390fd5b6003600260006101000a81548160ff0219169083600581111561127b5761127a6117ed565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f600260036040516112b3929190612311565b60405180910390a1565b6112c56114e9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611334576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132b90612562565b60405180910390fd5b61133d81611567565b50565b6113486114e9565b6000600581111561135c5761135b6117ed565b5b600260009054906101000a900460ff16600581111561137e5761137d6117ed565b5b146113be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b5906125f4565b60405180910390fd5b60011515600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16151503611454576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144b90612660565b60405180910390fd5b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055507fb6be2187d059cc2a55fe29e0e503b566e1e0f8c8780096e185429350acffd3dd816040516114de91906117d2565b60405180910390a150565b6114f161162b565b73ffffffffffffffffffffffffffffffffffffffff1661150f610a59565b73ffffffffffffffffffffffffffffffffffffffff1614611565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155c906126cc565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b604051806040016040528060608152602001600081525090565b6040518060600160405280600015158152602001600015158152602001600081525090565b600080fd5b600080fd5b6000819050919050565b61168f8161167c565b811461169a57600080fd5b50565b6000813590506116ac81611686565b92915050565b6000602082840312156116c8576116c7611672565b5b60006116d68482850161169d565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611704576117036116df565b5b8235905067ffffffffffffffff811115611721576117206116e4565b5b60208301915083600182028301111561173d5761173c6116e9565b5b9250929050565b6000806020838503121561175b5761175a611672565b5b600083013567ffffffffffffffff81111561177957611778611677565b5b611785858286016116ee565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117bc82611791565b9050919050565b6117cc816117b1565b82525050565b60006020820190506117e760008301846117c3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6006811061182d5761182c6117ed565b5b50565b600081905061183e8261181c565b919050565b600061184e82611830565b9050919050565b61185e81611843565b82525050565b60006020820190506118796000830184611855565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156118b957808201518184015260208101905061189e565b60008484015250505050565b6000601f19601f8301169050919050565b60006118e18261187f565b6118eb818561188a565b93506118fb81856020860161189b565b611904816118c5565b840191505092915050565b6119188161167c565b82525050565b6000604083016000830151848203600086015261193b82826118d6565b9150506020830151611950602086018261190f565b508091505092915050565b60006020820190508181036000830152611975818461191e565b905092915050565b6119868161167c565b82525050565b60006020820190506119a1600083018461197d565b92915050565b6119b0816117b1565b81146119bb57600080fd5b50565b6000813590506119cd816119a7565b92915050565b6000602082840312156119e9576119e8611672565b5b60006119f7848285016119be565b91505092915050565b60008115159050919050565b611a1581611a00565b82525050565b606082016000820151611a316000850182611a0c565b506020820151611a446020850182611a0c565b506040820151611a57604085018261190f565b50505050565b6000606082019050611a726000830184611a1b565b92915050565b600082825260208201905092915050565b7f566f74696e6720617265206e6f742066696e6973686564000000000000000000600082015250565b6000611abf601783611a78565b9150611aca82611a89565b602082019050919050565b60006020820190508181036000830152611aee81611ab2565b9050919050565b7f596f75277265206e6f74206120766f7465720000000000000000000000000000600082015250565b6000611b2b601283611a78565b9150611b3682611af5565b602082019050919050565b60006020820190508181036000830152611b5a81611b1e565b9050919050565b7f566f74696e672073657373696f6e20686176656e74207374617274656420796560008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b6000611bbd602183611a78565b9150611bc882611b61565b604082019050919050565b60006020820190508181036000830152611bec81611bb0565b9050919050565b7f596f75206861766520616c726561647920766f74656400000000000000000000600082015250565b6000611c29601683611a78565b9150611c3482611bf3565b602082019050919050565b60006020820190508181036000830152611c5881611c1c565b9050919050565b7f50726f706f73616c206e6f7420666f756e640000000000000000000000000000600082015250565b6000611c95601283611a78565b9150611ca082611c5f565b602082019050919050565b60006020820190508181036000830152611cc481611c88565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d348261167c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611d6657611d65611cfa565b5b600182019050919050565b6000604082019050611d8660008301856117c3565b611d93602083018461197d565b9392505050565b7f50726f706f73616c7320617265206e6f7420616c6c6f77656420796574000000600082015250565b6000611dd0601d83611a78565b9150611ddb82611d9a565b602082019050919050565b60006020820190508181036000830152611dff81611dc3565b9050919050565b50565b6000611e16600083611a78565b9150611e2182611e06565b600082019050919050565b60006020820190508181036000830152611e4581611e09565b9050919050565b82818337600083830152505050565b6000611e678385611a78565b9350611e74838584611e4c565b611e7d836118c5565b840190509392505050565b60006020820190508181036000830152611ea3818486611e5b565b90509392505050565b7f566f7573206e6520706f7576657a20706173206e65207269656e2070726f706f60008201527f7365720000000000000000000000000000000000000000000000000000000000602082015250565b6000611f08602383611a78565b9150611f1382611eac565b604082019050919050565b60006020820190508181036000830152611f3781611efb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611fb457607f821691505b602082108103611fc757611fc6611f6d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261202f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611ff2565b6120398683611ff2565b95508019841693508086168417925050509392505050565b6000819050919050565b600061207661207161206c8461167c565b612051565b61167c565b9050919050565b6000819050919050565b6120908361205b565b6120a461209c8261207d565b848454611fff565b825550505050565b600090565b6120b96120ac565b6120c4818484612087565b505050565b5b818110156120e8576120dd6000826120b1565b6001810190506120ca565b5050565b601f82111561212d576120fe81611fcd565b61210784611fe2565b81016020851015612116578190505b61212a61212285611fe2565b8301826120c9565b50505b505050565b600082821c905092915050565b600061215060001984600802612132565b1980831691505092915050565b6000612169838361213f565b9150826002028217905092915050565b6121828261187f565b67ffffffffffffffff81111561219b5761219a611f3e565b5b6121a58254611f9c565b6121b08282856120ec565b600060209050601f8311600181146121e357600084156121d1578287015190505b6121db858261215d565b865550612243565b601f1984166121f186611fcd565b60005b82811015612219578489015182556001820191506020850194506020810190506121f4565b868310156122365784890151612232601f89168261213f565b8355505b6001600288020188555050505b505050505050565b60006122568261167c565b91506122618361167c565b925082820390508181111561227957612278611cfa565b5b92915050565b7f43757272656e7420737461747573206973206e6f7420766f74696e672073657360008201527f73696f6e20656e64656400000000000000000000000000000000000000000000602082015250565b60006122db602a83611a78565b91506122e68261227f565b604082019050919050565b6000602082019050818103600083015261230a816122ce565b9050919050565b60006040820190506123266000830185611855565b6123336020830184611855565b9392505050565b7f5265676973746572696e672070726f706f73616c732063616e7420626520737460008201527f6172746564206e6f770000000000000000000000000000000000000000000000602082015250565b6000612396602983611a78565b91506123a18261233a565b604082019050919050565b600060208201905081810360008301526123c581612389565b9050919050565b7f5265676973746572696e672070726f706f73616c7320686176656e742073746160008201527f7274656420796574000000000000000000000000000000000000000000000000602082015250565b6000612428602883611a78565b9150612433826123cc565b604082019050919050565b600060208201905081810360008301526124578161241b565b9050919050565b7f5265676973746572696e672070726f706f73616c73207068617365206973206e60008201527f6f742066696e6973686564000000000000000000000000000000000000000000602082015250565b60006124ba602b83611a78565b91506124c58261245e565b604082019050919050565b600060208201905081810360008301526124e9816124ad565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061254c602683611a78565b9150612557826124f0565b604082019050919050565b6000602082019050818103600083015261257b8161253f565b9050919050565b7f566f7465727320726567697374726174696f6e206973206e6f74206f70656e2060008201527f7965740000000000000000000000000000000000000000000000000000000000602082015250565b60006125de602383611a78565b91506125e982612582565b604082019050919050565b6000602082019050818103600083015261260d816125d1565b9050919050565b7f416c726561647920726567697374657265640000000000000000000000000000600082015250565b600061264a601283611a78565b915061265582612614565b602082019050919050565b600060208201905081810360008301526126798161263d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006126b6602083611a78565b91506126c182612680565b602082019050919050565b600060208201905081810360008301526126e5816126a9565b905091905056fea264697066735822122001487989f949c809fda972c5ab1187cfcc429d293e2642402a1c9fb109c1820564736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c8063a7bfab16116100a2578063c88af42f11610071578063c88af42f14610234578063d4f50f981461023e578063ee74c6781461026e578063f2fde38b14610278578063f4ab9adf146102945761010b565b8063a7bfab16146101d2578063bdc01431146101dc578063c7038a4e146101fa578063c7f758a8146102045761010b565b8063715018a6116100de578063715018a61461015c5780638da5cb5b14610166578063a1edffa214610184578063a2788cce146101a25761010b565b80631964b44514610110578063230796ae1461011a5780632fdae3c514610136578063378a217814610152575b600080fd5b6101186102b0565b005b610134600480360381019061012f91906116b2565b61035a565b005b610150600480360381019061014b9190611744565b610655565b005b61015a6108d8565b005b610164610a45565b005b61016e610a59565b60405161017b91906117d2565b60405180910390f35b61018c610a82565b6040516101999190611864565b60405180910390f35b6101bc60048036038101906101b791906116b2565b610a95565b6040516101c9919061195b565b60405180910390f35b6101da610bfc565b005b6101e4610ce2565b6040516101f1919061198c565b60405180910390f35b610202610ce8565b005b61021e600480360381019061021991906116b2565b610e63565b60405161022b919061195b565b60405180910390f35b61023c610fca565b005b610258600480360381019061025391906119d3565b6110af565b6040516102659190611a5d565b60405180910390f35b6102766111d7565b005b610292600480360381019061028d91906119d3565b6112bd565b005b6102ae60048036038101906102a991906119d3565b611340565b005b6102b86114e9565b6005808111156102cb576102ca6117ed565b5b600260009054906101000a900460ff1660058111156102ed576102ec6117ed565b5b1461032d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032490611ad5565b60405180910390fd5b6000600260006101000a81548160ff02191690836005811115610353576103526117ed565b5b0217905550565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166103e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e090611b41565b60405180910390fd5b600360058111156103fd576103fc6117ed565b5b600260009054906101000a900460ff16600581111561041f5761041e6117ed565b5b1461045f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045690611bd3565b60405180910390fd5b60011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff161515036104f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ec90611c3f565b60405180910390fd5b600380549050811061053c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053390611cab565b60405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff021916908315150217905550600381815481106105f2576105f1611ccb565b5b9060005260206000209060020201600101600081548092919061061490611d29565b91905055507f4d99b957a2bc29a30ebd96a7be8e68fe50a3c701db28a91436490b7d53870ca4338260405161064a929190611d71565b60405180910390a150565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166106e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106db90611b41565b60405180910390fd5b600160058111156106f8576106f76117ed565b5b600260009054906101000a900460ff16600581111561071a576107196117ed565b5b1461075a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075190611de6565b60405180910390fd5b60405160200161076990611e2c565b604051602081830303815290604052805190602001208282604051602001610792929190611e88565b60405160208183030381529060405280519060200120036107e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107df90611f1e565b60405180910390fd5b6107f0611633565b82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081600001819052506003819080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001908161087e9190612179565b506020820151816001015550507f92e393e9b54e2f801d3ea4beb0c5e71a21cc34a5d34b77d0fb8a3aa1650dc18f60016003805490506108be919061224b565b6040516108cb919061198c565b60405180910390a1505050565b6108e06114e9565b600460058111156108f4576108f36117ed565b5b600260009054906101000a900460ff166005811115610916576109156117ed565b5b14610956576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094d906122f1565b60405180910390fd5b600080600090505b6003805490508110156109d4576003828154811061097f5761097e611ccb565b5b906000526020600020906002020160010154600382815481106109a5576109a4611ccb565b5b90600052602060002090600202016001015411156109c1578091505b80806109cc90611d29565b91505061095e565b50806001819055506005600260006101000a81548160ff02191690836005811115610a0257610a016117ed565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f60046005604051610a3a929190612311565b60405180910390a150565b610a4d6114e9565b610a576000611567565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900460ff1681565b610a9d611633565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610b2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2390611b41565b60405180910390fd5b60038281548110610b4057610b3f611ccb565b5b9060005260206000209060020201604051806040016040529081600082018054610b6990611f9c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9590611f9c565b8015610be25780601f10610bb757610100808354040283529160200191610be2565b820191906000526020600020905b815481529060010190602001808311610bc557829003601f168201915b505050505081526020016001820154815250509050919050565b610c046114e9565b60036005811115610c1857610c176117ed565b5b600260009054906101000a900460ff166005811115610c3a57610c396117ed565b5b14610c7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7190611bd3565b60405180910390fd5b6004600260006101000a81548160ff02191690836005811115610ca057610c9f6117ed565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f60036004604051610cd8929190612311565b60405180910390a1565b60015481565b610cf06114e9565b60006005811115610d0457610d036117ed565b5b600260009054906101000a900460ff166005811115610d2657610d256117ed565b5b14610d66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5d906123ac565b60405180910390fd5b6001600260006101000a81548160ff02191690836005811115610d8c57610d8b6117ed565b5b0217905550610d99611633565b6040518060400160405280600781526020017f47454e4553495300000000000000000000000000000000000000000000000000815250816000018190525060038190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000019081610e189190612179565b506020820151816001015550507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f60006001604051610e58929190612311565b60405180910390a150565b610e6b611633565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610efa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef190611b41565b60405180910390fd5b60038281548110610f0e57610f0d611ccb565b5b9060005260206000209060020201604051806040016040529081600082018054610f3790611f9c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6390611f9c565b8015610fb05780601f10610f8557610100808354040283529160200191610fb0565b820191906000526020600020905b815481529060010190602001808311610f9357829003601f168201915b505050505081526020016001820154815250509050919050565b610fd26114e9565b60016005811115610fe657610fe56117ed565b5b600260009054906101000a900460ff166005811115611008576110076117ed565b5b14611048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103f9061243e565b60405180910390fd5b60028060006101000a81548160ff0219169083600581111561106d5761106c6117ed565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f600160026040516110a5929190612311565b60405180910390a1565b6110b761164d565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16611146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113d90611b41565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016001820154815250509050919050565b6111df6114e9565b600260058111156111f3576111f26117ed565b5b600260009054906101000a900460ff166005811115611215576112146117ed565b5b14611255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124c906124d0565b60405180910390fd5b6003600260006101000a81548160ff0219169083600581111561127b5761127a6117ed565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f600260036040516112b3929190612311565b60405180910390a1565b6112c56114e9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611334576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132b90612562565b60405180910390fd5b61133d81611567565b50565b6113486114e9565b6000600581111561135c5761135b6117ed565b5b600260009054906101000a900460ff16600581111561137e5761137d6117ed565b5b146113be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b5906125f4565b60405180910390fd5b60011515600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16151503611454576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144b90612660565b60405180910390fd5b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055507fb6be2187d059cc2a55fe29e0e503b566e1e0f8c8780096e185429350acffd3dd816040516114de91906117d2565b60405180910390a150565b6114f161162b565b73ffffffffffffffffffffffffffffffffffffffff1661150f610a59565b73ffffffffffffffffffffffffffffffffffffffff1614611565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155c906126cc565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b604051806040016040528060608152602001600081525090565b6040518060600160405280600015158152602001600015158152602001600081525090565b600080fd5b600080fd5b6000819050919050565b61168f8161167c565b811461169a57600080fd5b50565b6000813590506116ac81611686565b92915050565b6000602082840312156116c8576116c7611672565b5b60006116d68482850161169d565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611704576117036116df565b5b8235905067ffffffffffffffff811115611721576117206116e4565b5b60208301915083600182028301111561173d5761173c6116e9565b5b9250929050565b6000806020838503121561175b5761175a611672565b5b600083013567ffffffffffffffff81111561177957611778611677565b5b611785858286016116ee565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117bc82611791565b9050919050565b6117cc816117b1565b82525050565b60006020820190506117e760008301846117c3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6006811061182d5761182c6117ed565b5b50565b600081905061183e8261181c565b919050565b600061184e82611830565b9050919050565b61185e81611843565b82525050565b60006020820190506118796000830184611855565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156118b957808201518184015260208101905061189e565b60008484015250505050565b6000601f19601f8301169050919050565b60006118e18261187f565b6118eb818561188a565b93506118fb81856020860161189b565b611904816118c5565b840191505092915050565b6119188161167c565b82525050565b6000604083016000830151848203600086015261193b82826118d6565b9150506020830151611950602086018261190f565b508091505092915050565b60006020820190508181036000830152611975818461191e565b905092915050565b6119868161167c565b82525050565b60006020820190506119a1600083018461197d565b92915050565b6119b0816117b1565b81146119bb57600080fd5b50565b6000813590506119cd816119a7565b92915050565b6000602082840312156119e9576119e8611672565b5b60006119f7848285016119be565b91505092915050565b60008115159050919050565b611a1581611a00565b82525050565b606082016000820151611a316000850182611a0c565b506020820151611a446020850182611a0c565b506040820151611a57604085018261190f565b50505050565b6000606082019050611a726000830184611a1b565b92915050565b600082825260208201905092915050565b7f566f74696e6720617265206e6f742066696e6973686564000000000000000000600082015250565b6000611abf601783611a78565b9150611aca82611a89565b602082019050919050565b60006020820190508181036000830152611aee81611ab2565b9050919050565b7f596f75277265206e6f74206120766f7465720000000000000000000000000000600082015250565b6000611b2b601283611a78565b9150611b3682611af5565b602082019050919050565b60006020820190508181036000830152611b5a81611b1e565b9050919050565b7f566f74696e672073657373696f6e20686176656e74207374617274656420796560008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b6000611bbd602183611a78565b9150611bc882611b61565b604082019050919050565b60006020820190508181036000830152611bec81611bb0565b9050919050565b7f596f75206861766520616c726561647920766f74656400000000000000000000600082015250565b6000611c29601683611a78565b9150611c3482611bf3565b602082019050919050565b60006020820190508181036000830152611c5881611c1c565b9050919050565b7f50726f706f73616c206e6f7420666f756e640000000000000000000000000000600082015250565b6000611c95601283611a78565b9150611ca082611c5f565b602082019050919050565b60006020820190508181036000830152611cc481611c88565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d348261167c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611d6657611d65611cfa565b5b600182019050919050565b6000604082019050611d8660008301856117c3565b611d93602083018461197d565b9392505050565b7f50726f706f73616c7320617265206e6f7420616c6c6f77656420796574000000600082015250565b6000611dd0601d83611a78565b9150611ddb82611d9a565b602082019050919050565b60006020820190508181036000830152611dff81611dc3565b9050919050565b50565b6000611e16600083611a78565b9150611e2182611e06565b600082019050919050565b60006020820190508181036000830152611e4581611e09565b9050919050565b82818337600083830152505050565b6000611e678385611a78565b9350611e74838584611e4c565b611e7d836118c5565b840190509392505050565b60006020820190508181036000830152611ea3818486611e5b565b90509392505050565b7f566f7573206e6520706f7576657a20706173206e65207269656e2070726f706f60008201527f7365720000000000000000000000000000000000000000000000000000000000602082015250565b6000611f08602383611a78565b9150611f1382611eac565b604082019050919050565b60006020820190508181036000830152611f3781611efb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611fb457607f821691505b602082108103611fc757611fc6611f6d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261202f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611ff2565b6120398683611ff2565b95508019841693508086168417925050509392505050565b6000819050919050565b600061207661207161206c8461167c565b612051565b61167c565b9050919050565b6000819050919050565b6120908361205b565b6120a461209c8261207d565b848454611fff565b825550505050565b600090565b6120b96120ac565b6120c4818484612087565b505050565b5b818110156120e8576120dd6000826120b1565b6001810190506120ca565b5050565b601f82111561212d576120fe81611fcd565b61210784611fe2565b81016020851015612116578190505b61212a61212285611fe2565b8301826120c9565b50505b505050565b600082821c905092915050565b600061215060001984600802612132565b1980831691505092915050565b6000612169838361213f565b9150826002028217905092915050565b6121828261187f565b67ffffffffffffffff81111561219b5761219a611f3e565b5b6121a58254611f9c565b6121b08282856120ec565b600060209050601f8311600181146121e357600084156121d1578287015190505b6121db858261215d565b865550612243565b601f1984166121f186611fcd565b60005b82811015612219578489015182556001820191506020850194506020810190506121f4565b868310156122365784890151612232601f89168261213f565b8355505b6001600288020188555050505b505050505050565b60006122568261167c565b91506122618361167c565b925082820390508181111561227957612278611cfa565b5b92915050565b7f43757272656e7420737461747573206973206e6f7420766f74696e672073657360008201527f73696f6e20656e64656400000000000000000000000000000000000000000000602082015250565b60006122db602a83611a78565b91506122e68261227f565b604082019050919050565b6000602082019050818103600083015261230a816122ce565b9050919050565b60006040820190506123266000830185611855565b6123336020830184611855565b9392505050565b7f5265676973746572696e672070726f706f73616c732063616e7420626520737460008201527f6172746564206e6f770000000000000000000000000000000000000000000000602082015250565b6000612396602983611a78565b91506123a18261233a565b604082019050919050565b600060208201905081810360008301526123c581612389565b9050919050565b7f5265676973746572696e672070726f706f73616c7320686176656e742073746160008201527f7274656420796574000000000000000000000000000000000000000000000000602082015250565b6000612428602883611a78565b9150612433826123cc565b604082019050919050565b600060208201905081810360008301526124578161241b565b9050919050565b7f5265676973746572696e672070726f706f73616c73207068617365206973206e60008201527f6f742066696e6973686564000000000000000000000000000000000000000000602082015250565b60006124ba602b83611a78565b91506124c58261245e565b604082019050919050565b600060208201905081810360008301526124e9816124ad565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061254c602683611a78565b9150612557826124f0565b604082019050919050565b6000602082019050818103600083015261257b8161253f565b9050919050565b7f566f7465727320726567697374726174696f6e206973206e6f74206f70656e2060008201527f7965740000000000000000000000000000000000000000000000000000000000602082015250565b60006125de602383611a78565b91506125e982612582565b604082019050919050565b6000602082019050818103600083015261260d816125d1565b9050919050565b7f416c726561647920726567697374657265640000000000000000000000000000600082015250565b600061264a601283611a78565b915061265582612614565b602082019050919050565b600060208201905081810360008301526126798161263d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006126b6602083611a78565b91506126c182612680565b602082019050919050565b600060208201905081810360008301526126e5816126a9565b905091905056fea264697066735822122001487989f949c809fda972c5ab1187cfcc429d293e2642402a1c9fb109c1820564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Voting.sol:Voting",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 141,
        "contract": "contracts/Voting.sol:Voting",
        "label": "winningProposalID",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 163,
        "contract": "contracts/Voting.sol:Voting",
        "label": "workflowStatus",
        "offset": 0,
        "slot": "2",
        "type": "t_enum(WorkflowStatus)160"
      },
      {
        "astId": 167,
        "contract": "contracts/Voting.sol:Voting",
        "label": "proposalsArray",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(Proposal)153_storage)dyn_storage"
      },
      {
        "astId": 172,
        "contract": "contracts/Voting.sol:Voting",
        "label": "voters",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Voter)148_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Proposal)153_storage)dyn_storage": {
        "base": "t_struct(Proposal)153_storage",
        "encoding": "dynamic_array",
        "label": "struct Voting.Proposal[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(WorkflowStatus)160": {
        "encoding": "inplace",
        "label": "enum Voting.WorkflowStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Voter)148_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Voting.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)148_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)153_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Proposal",
        "members": [
          {
            "astId": 150,
            "contract": "contracts/Voting.sol:Voting",
            "label": "description",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 152,
            "contract": "contracts/Voting.sol:Voting",
            "label": "voteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Voter)148_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Voter",
        "members": [
          {
            "astId": 143,
            "contract": "contracts/Voting.sol:Voting",
            "label": "isRegistered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 145,
            "contract": "contracts/Voting.sol:Voting",
            "label": "hasVoted",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 147,
            "contract": "contracts/Voting.sol:Voting",
            "label": "votedProposalId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}